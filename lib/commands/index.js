

var fs = require('fs');
var path = require('path');
var prompt = require('prompt');
var sys = require('sys');
var exec = require('child_process').exec;

var swig = require('swig');
swig.init({
    allowErrors: false,
    autoescape: true,
    cache: true,
    encoding: 'utf8',
    filters: {},
    root: '/',
    tags: {},
    extensions: {},
    tzOffset: 0
});

var commands = module.exports;

var copy = function(source, dest){
	exec("cp "+source+" "+dest, function (error, stdout, stderr) {
		if(stdout){ sys.print('stdout: ' + stdout); }
		if(stderr){ sys.print('stderr: ' + stderr); }
		if (error !== null) { console.log('exec error: ' + error); }
	});
}
var reloadnginx = function(){
	exec("service nginx restart", function (error, stdout, stderr) {
		if(stdout){ sys.print('stdout: ' + stdout); }
		if(stderr){ sys.print('stderr: ' + stderr); }
		if (error !== null) { console.log('exec error: ' + error); }
	});
}

//var app = require('./app');


commands.create = function() {
	var tmpldir = commands.config.tmpldir;
	var files = fs.readdirSync(tmpldir).filter(function (filename) {
		// Only want files, not dirs
		return fs.statSync(path.resolve(tmpldir, filename)).isFile();
	});
	console.log('Please select a template (number):')
	for(var i in files) {
	    console.log(i + '    '+ files[i] + '    ');
	}
	var schema = {
		properties: {
			tmplid: {
				description: 'selection #',
				pattern: /^\d/,
				message: 'Name must be only a single number',
				required: true
			},
			sitename: {
				description: 'Enter your site name',
				pattern: /^[a-zA-Z.\-]+$/,
				message: 'Name must be only letters, dots, or dashes',
				required: true
			}
		}
	};
	prompt.start();
	prompt.get(schema, function (err, result) {
		if(err){
			console.log('something was wrong with the inputs')
		} else {
			// get selected template filename
			var templatename = files[parseInt(result.tmplid)];
			var selection = path.resolve(tmpldir, templatename);
			var data = { 
				sitename: result.sitename,
				wwwdir: commands.config.wwwdir
			};
		    console.log('rendering: '+selection);
		    var tpl = swig.compileFile(selection);
		    var rendered = tpl.render(data);
		    
		    // create www dirs
		    console.log('creating www folder');
		    fs.mkdirSync(path.resolve(commands.config.wwwdir, result.sitename), 0774);
		    console.log('creating public folder');
		    fs.mkdirSync(path.resolve(commands.config.wwwdir, result.sitename, "public"), 0774);
		    console.log('writing conf file');
		    // write rendered to file
		    //copy(selection, path.resolve(commands.config.nginxdir, "sites-available"));
		    fs.writeFileSync(path.resolve(commands.config.nginxdir, "sites-available", result.sitename)
		    				, rendered
		    				, 'utf-8'
		    				);
			console.log('writing symlink to sites-enabled');
		    fs.symlinkSync(
		    				path.resolve(commands.config.nginxdir, "sites-available", result.sitename)
		    				, path.resolve(commands.config.nginxdir, "sites-enabled", result.sitename)
		    				);
		    console.log('copying default html');
		    copy(path.resolve(tmpldir, "common", "50x.html")
		    	, path.resolve(commands.config.wwwdir, result.sitename, "public")
		    	);
		    copy(path.resolve(tmpldir, "common", "index.html")
		    	, path.resolve(commands.config.wwwdir, result.sitename, "public")
		    	);
		    
		    //console.log('creating default log files');
		    console.log('reloading nginx');
		    //reloadnginx();
		    //console.log('changing to correct file permissions');
		    //fs.chownSync(path, uid, gid);
		}
	  });
};

commands.list = function() {
	// All available site, active or not
	var avdir = path.resolve(commands.config.nginxdir, "sites-available");
	var avfiles = fs.readdirSync(avdir).filter(function (filename) {
		// Only want files, not dirs
		return fs.statSync(path.resolve(avdir, filename)).isFile();
	});

	// Print Active site
	console.log('Active sites:');
	var actdir = path.resolve(commands.config.nginxdir, "sites-enabled");
	// should only be symlinks here
	var actfiles = fs.readdirSync(actdir);
	for(var i in actfiles) {
	    console.log(i + '    '+ actfiles[i] + '    ');
	}

	// Print the Difference
	console.log('disabled sites:');
	disfiles = avfiles.filter(function (file){
		for (var i in actfiles) {
			if (file == actfiles[i]) {
				return false
			}
		}
		return true
	});
	for(var i in disfiles) {
	    console.log(i + '    '+ disfiles[i] + '    ');
	}
};

commands.version = function() {
	// seems to be an error in flatiron's autogenerated version?
  commands.print(require('../package.json').version);
};

commands.enable = function() {
	console.log('enable command was activated');
	// All available site, active or not
	var avdir = path.resolve(commands.config.nginxdir, "sites-available");
	var avfiles = fs.readdirSync(avdir).filter(function (filename) {
		// Only want files, not dirs
		return fs.statSync(path.resolve(avdir, filename)).isFile();
	});
	// Active sites
	var actdir = path.resolve(commands.config.nginxdir, "sites-enabled");
	// should only be symlinks here
	var actfiles = fs.readdirSync(actdir);

	// disabled sites
	disfiles = avfiles.filter(function (file){
		for (var i in actfiles) {
			if (file == actfiles[i]) {
				return false
			}
		}
		return true
	});

	// select only from disabled sites
	for(var i in disfiles) {
	    console.log(i + '    '+ disfiles[i] + '    ');
	}

	console.log('please select a site to enable');
	// get the selection
	var schema = {
		properties: {
			id: {
				description: 'selection #',
				pattern: /^\d/,
				message: 'Name must be only a single number',
				required: true
			}
		}
	};
	prompt.start();
	prompt.get(schema, function (err, result) {
		if(err){
			console.log('something was wrong with the inputs')
		} else {
			if (result.id <= (disfiles.length - 1) ) {
				console.log('writing symlink to sites-enabled');
			    fs.symlinkSync(
			    				path.resolve(commands.config.nginxdir, "sites-available", disfiles[result.id])
			    				, path.resolve(commands.config.nginxdir, "sites-enabled", disfiles[result.id])
			    				);
			}
		}
	});
};

commands.disable = function() {
	console.log('disable command was activated');
	// Active sites
	var actdir = path.resolve(commands.config.nginxdir, "sites-enabled");
	// should only be symlinks here
	var actfiles = fs.readdirSync(actdir);
	for(var i in actfiles) {
	    console.log(i + '    '+ actfiles[i] + '    ');
	}

	console.log('please select a site to disable');
	// get the selection
	var schema = {
		properties: {
			id: {
				description: 'selection #',
				pattern: /^\d/,
				message: 'Name must be only a single number',
				required: true
			}
		}
	};
	prompt.start();
	prompt.get(schema, function (err, result) {
		if(err){
			console.log('something was wrong with the inputs')
		} else {
			if (result.id <= (actfiles.length - 1) ) {
				console.log('removing link, nothing has been harmed');
				var killme = path.resolve(commands.config.nginxdir, "sites-enabled", actfiles[result.id]);
				exec("rm "+killme, function (error, stdout, stderr) {
					if(stdout){ sys.print('stdout: ' + stdout); }
					if(stderr){ sys.print('stderr: ' + stderr); }
					if (error !== null) { console.log('exec error: ' + error); }
				});
			    
			}
		}
	});

};

commands.delete = function() {
	console.log('WARNING: this will delete the config file AND the entire site including all html.');
	console.log('Perhaps you want to try "disable" instead?');
	console.log('this command has not ben written yet');
};
